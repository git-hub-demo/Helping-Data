###########HTML#############
<div>
        @if (Model.Pager != null)
        {
            if (Model.Pager.CurrentPage > 1)
            {
                <button class="pageButtons" data-pageNo="1">First</button>
                <button class="pageButtons" data-pageNo="@(Model.Pager.CurrentPage - 1)">Previous</button>
            }

            for (int page = Model.Pager.StartPage; page <= Model.Pager.EndPage; page++)
            {
                var activeClass = Model.Pager.CurrentPage == page ? "active bg-info" : string.Empty;
                <button class="@activeClass pageButtons" data-pageNo="@page">@page</button>
            }

            if (Model.Pager.CurrentPage < Model.Pager.TotalPages)
            {
                <button class="pageButtons" data-pageNo="@(Model.Pager.CurrentPage + 1)">Next</button>
                <button class="pageButtons" data-pageNo="@(Model.Pager.EndPage)">Last</button>
            }
        }

    </div>
    
    
    #############AJAX##########
    $('.pageButtons').click(function () {
        var pageId = $(this).attr("data-pageNo");
        $.ajax({
                url:'@Url.Action("CategoryTable","Category")',//"/Product/ProductTable",
                data: {
                    pageNo: pageId
                }

            })
            .done(function (responce) {
                $('#tableContainer').html(responce);
            })
            .fail(function (XMLHttpResponce, textStatus, errorThrown) {
                alert("Fail")
            });
    });
    
    ############SERVER SIDE###########
    public ActionResult CategoryTable(string search, int? pageNo)
        {
            pageNo = pageNo.HasValue ? pageNo.Value > 0 ? pageNo.Value : 1 : 1;

            var totalRecords = CategoriesService.Instance.CategoriesCount(search);

            NewCategoryViewModel model = new NewCategoryViewModel
            {
                Categories = CategoriesService.Instance.GetCategories(search, pageNo.Value)
            };

            if(model.Categories != null) { 
                
                model.Pager = new Pager(totalRecords, pageNo,3);
                
                return PartialView(model);
            }
            else
            {
                return HttpNotFound();
            }
        }
        
        
        ##########SERVICE SIDE##########
        public int CategoriesCount(string search)
        {
            using (var context = new CBContext())
            {
                if (!string.IsNullOrEmpty(search))
                {
                    return context.Categories.Where(c => c.Name != null &&
                        c.Name.ToLower().Contains(search.ToLower())).Count();
                }
                else
                {
                    return context.Categories.Count();
                }
            }
        }

        public List<Category> GetCategories(string search, int pageNo)
        {
            var pageSize = 3;
            using (var context = new CBContext())
            {

                if (!string.IsNullOrEmpty(search))
                {
                    return context.Categories.Where(c => c.Name!=null && c.Name.ToLower()
                        .Contains(search.ToLower()))
                        .OrderBy(x => x.Id)
                        .Skip((pageNo - 1) * pageSize)
                        .Take(pageSize)
                        .ToList();
                }
                else
                {
                    var data= context.Categories
                        .OrderBy(x => x.Id)
                        .Skip((pageNo - 1) * pageSize)
                        .Take(pageSize)
                        .ToList();
                    return data;
                }
            }
        }
        
        
##########DEFINE BELOW CODE IN SEPERATE SHAREDVIEWMODEL CLASS##############
public class Pager
    {
        public Pager(int totalItems, int? page, int pageSize = 10)
        {
            if (pageSize == 0) pageSize = 10;

            var totalPages=(int)Math.Ceiling((decimal)totalItems / (decimal)pageSize);
            var currentPage = page != null ? (int) page : 1;
            var startPage = currentPage - 5;
            var endPage = currentPage + 4;
            if (startPage <= 0)
            {
                endPage -= (startPage - 1);
                startPage = 1;
            }
            if (endPage > totalPages)
            {
                endPage = totalPages;
                if (endPage > 10)
                {
                    startPage = endPage - 9;
                }
            }

            TotalItems = totalItems;
            CurrentPage = currentPage;
            PageSize = pageSize;
            TotalPages = totalPages;
            StartPage = startPage;
            EndPage = endPage;
        }

        public int TotalItems { get; private set; }
        public int CurrentPage { get; private set; }
        public int PageSize { get; private set; }
        public int TotalPages { get; private set; }
        public int StartPage { get; private set; }
        public int EndPage { get; private set; }

        
    }
